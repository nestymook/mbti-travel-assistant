"""
Project templates for LocalMCP MCP Server
"""

# Project templates
TEMPLATES = {
    "python": {
        "name": "Python Project",
        "description": "A basic Python project with main.py, requirements.txt, and README",
        "files": {
            "main.py": '''#!/usr/bin/env python3
"""
{project_name}
"""

def main():
    print("Hello from {project_name}!")

if __name__ == "__main__":
    main()
''',
            "requirements.txt": "# Add your dependencies here\n",
            "README.md": '''# {project_name}

A Python project created with LocalMCP MCP Server.

## Installation

```bash
pip install -r requirements.txt
```

## Usage

```bash
python main.py
```
''',
            ".gitignore": '''# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json
'''
        }
    },
    "node": {
        "name": "Node.js Project",
        "description": "A basic Node.js project with package.json and main entry point",
        "files": {
            "index.js": '''/**
 * {project_name}
 */

console.log("Hello from {project_name}!");
''',
            "package.json": '''{
  "name": "{project_name_lower}",
  "version": "1.0.0",
  "description": "A Node.js project created with LocalMCP MCP Server",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "MIT"
}
''',
            "README.md": '''# {project_name}

A Node.js project created with LocalMCP MCP Server.

## Installation

```bash
npm install
```

## Usage

```bash
npm start
```
''',
            ".gitignore": '''# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
'''
        }
    },
    "web": {
        "name": "Web Project",
        "description": "A basic web project with HTML, CSS, and JavaScript",
        "files": {
            "index.html": '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{project_name}</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Welcome to {project_name}</h1>
        <p>This is a web project created with LocalMCP MCP Server.</p>
        <button id="clickBtn">Click me!</button>
        <p id="message"></p>
    </div>
    <script src="script.js"></script>
</body>
</html>
''',
            "style.css": '''/* {project_name} Styles */

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f4f4f4;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: white;
    margin-top: 50px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h1 {
    color: #2c3e50;
    text-align: center;
    margin-bottom: 20px;
}

p {
    margin-bottom: 15px;
    text-align: center;
}

button {
    display: block;
    margin: 20px auto;
    padding: 10px 20px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

button:hover {
    background-color: #2980b9;
}

#message {
    font-weight: bold;
    color: #27ae60;
}
''',
            "script.js": '''/**
 * {project_name} JavaScript
 */

document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('clickBtn');
    const message = document.getElementById('message');
    
    button.addEventListener('click', function() {
        message.textContent = 'Hello from {project_name}! Button clicked!';
    });
});
''',
            "README.md": '''# {project_name}

A web project created with LocalMCP MCP Server.

## Files

- `index.html` - Main HTML file
- `style.css` - Stylesheet
- `script.js` - JavaScript functionality

## Usage

Open `index.html` in your web browser to view the project.

## Development

You can serve this project using any web server:

```bash
# Using Python
python -m http.server 8000

# Using Node.js
npx http-server

# Using PHP
php -S localhost:8000
```
'''
        }
    }
}
