version: '3.8'

services:
  # MBTI Travel Assistant MCP Service - Production Configuration
  mbti-travel-assistant:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    container_name: mbti-travel-assistant-mcp-prod
    ports:
      - "8080:8080"  # AgentCore Runtime
      - "9090:9090"  # Metrics endpoint
    environment:
      - ENVIRONMENT=production
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - CACHE_ENABLED=true
      - CACHE_TTL=1800
      - TRACING_ENABLED=true
      - METRICS_ENABLED=true
      # MCP Endpoints (production URLs)
      - SEARCH_MCP_ENDPOINT=${SEARCH_MCP_ENDPOINT}
      - REASONING_MCP_ENDPOINT=${REASONING_MCP_ENDPOINT}
      - MCP_CONNECTION_TIMEOUT=45
      - MCP_RETRY_ATTEMPTS=5
      # Authentication (production)
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - COGNITO_REGION=${COGNITO_REGION:-us-east-1}
      - JWT_ALGORITHM=RS256
      - JWT_AUDIENCE=${JWT_AUDIENCE}
      - TOKEN_CACHE_TTL=1800
      # AgentCore Configuration
      - AGENT_MODEL=${AGENT_MODEL:-amazon.nova-pro-v1:0:300k}
      - AGENT_TEMPERATURE=0.1
      - AGENT_MAX_TOKENS=4096
      # Redis Configuration
      - REDIS_URL=${REDIS_URL}
    volumes:
      - /var/log/mbti-travel-assistant:/app/logs
      - /var/lib/mbti-travel-assistant/data:/app/data
      - /var/lib/mbti-travel-assistant/cache:/app/cache
    networks:
      - mbti-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "/app/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=mbti-travel-assistant,environment=production"

  # Nginx Reverse Proxy for Production
  nginx:
    image: nginx:alpine
    container_name: mbti-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - mbti-travel-assistant
    networks:
      - mbti-prod-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: mbti-fluentd-prod
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - mbti-prod-network
    restart: always
    environment:
      - FLUENTD_CONF=fluent.conf
      - FLUENTD_OPT=-v

  # Prometheus for Production Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mbti-prometheus-prod
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mbti-prod-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Alertmanager for Production Alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: mbti-alertmanager-prod
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - mbti-prod-network
    restart: always
    depends_on:
      - prometheus

networks:
  mbti-prod-network:
    driver: bridge
    name: mbti-travel-assistant-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_prod_data:
    name: mbti-prometheus-prod-data
  alertmanager_data:
    name: mbti-alertmanager-data